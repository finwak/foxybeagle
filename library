/* 
 * Personal Lending Library
 * this program will get media information 
 * and allow users to check out and return them
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.SwingUtilities;
public class Library {
	int index = 0;
	public int numberOfItems;
	ArrayList<MediaItems> mediaItems;	
	PrintWriter output;
	static int choice = 0;
	
	Library(){//constructor
	
		this.mediaItems= new ArrayList<>(10);
		for(int i = 0; i <10; i++){
			this.mediaItems.add(new MediaItems());	
		}	
	}
	public static void main(String[] args) {
		Library library = new Library();        //object
	    library.create();

			SwingUtilities.invokeLater(new Runnable(){
				public void run(){
					new LibraryGUI();
			
			}});
	
	    library.output.close();
	}


	void addNewItem(String title, String format){
	
	try{
		(mediaItems.get(numberOfItems)).setTitle(title);
		(mediaItems.get(numberOfItems)).setFormat(format);
		numberOfItems++;
	}catch(IndexOutOfBoundsException e){
		System.out.println("Index is out of range");
	}}

	void markItemOnLoan(String title, String name, String date){
	
		try{
			for(int i = 0; i <= numberOfItems; i++){
				if (mediaItems.get(i).getTitle().equals(title)){
					mediaItems.get(i).markOnLoan(name, date);
					break;
				}
			}		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	String[] listAllItems(){
		String[] allItems = new String[numberOfItems];
		try{
			for(int i=0;i<numberOfItems;i++){		
				if(mediaItems.get(i).getOnLoan()==true){
					allItems[i]=mediaItems.get(i).getTitle() +"(" +mediaItems.get(i).getFormat()+") Loaned to " + 
							mediaItems.get(i).getLoanedTo() +" " +mediaItems.get(i).getDateLoaned();
				}else{
					allItems[i]= mediaItems.get(i).getTitle() +"(" +mediaItems.get(i).getFormat()+")";
				}
			}	
	
		} catch (Exception e) {
			e.printStackTrace();
		}

		return allItems;
	}

	void markItemReturned(String title){
	
		try{	
				for(int i = 0; i <= numberOfItems; i++){
					if (mediaItems.get(i).getTitle().equals(title)){
						mediaItems.get(i).markReturned();
						break;
					}
				}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void delete(String title){

	
		try{
			for(int i = 0; i < mediaItems.size();i++){
				if (mediaItems.get(i).getTitle().equals(title)){
					mediaItems.remove(i);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void checkForFile(){
		java.io.File file = new java.io.File("library.txt");
		if(file.exists()){
			open();
		}else{
			create();	
		}
	}
	
	public void save(){
		try{
			for(int i = 0; i < mediaItems.size();i++){
					output.format("%s|%s|%s|%s|%b \n", mediaItems.get(i).getTitle(),
							mediaItems.get(i).getFormat(),mediaItems.get(i).getLoanedTo(),
							mediaItems.get(i).getDateLoaned(),mediaItems.get(i).getOnLoan());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void open(){
	
		String e;
		int count = 0;
		boolean ex;
			try {
				@SuppressWarnings("resource")
				Scanner read =new Scanner(new File("library.txt"));
				
				while(read.hasNext()){
						
					this.mediaItems.add(count, new MediaItems());
					mediaItems.get(count).setTitle(read.next());
					mediaItems.get(count).setFormat(read.next());
					mediaItems.get(count).setLoanedTo(read.next());
					mediaItems.get(count).setDateLoaned(read.next());
					e= read.next();
					if(e=="true"){
						ex=true;
					}else{
						ex=false;
					}
					mediaItems.get(count).setOnLoan(ex);
					count++;
				}				
			} catch (FileNotFoundException g) {
				g.printStackTrace();
			}
	}
	public void create(){
		 try {
			output = new PrintWriter("library.txt");
		} catch (FileNotFoundException e) {
		
			e.printStackTrace();
			System.out.println("you messed up");
		}
	}

}
